/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type LoanOfferStruct = {
  owner: PromiseOrValue<string>;
  token: PromiseOrValue<string>;
  offerId: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  minLoanAmount: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  interestRateBPS: PromiseOrValue<BigNumberish>;
  expiration: PromiseOrValue<BigNumberish>;
  minLoanDuration: PromiseOrValue<BigNumberish>;
  maxLoanDuration: PromiseOrValue<BigNumberish>;
};

export type LoanOfferStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  owner: string;
  token: string;
  offerId: BigNumber;
  nonce: BigNumber;
  minLoanAmount: BigNumber;
  amount: BigNumber;
  interestRateBPS: BigNumber;
  expiration: BigNumber;
  minLoanDuration: BigNumber;
  maxLoanDuration: BigNumber;
};

export interface TroveManagerInterface extends utils.Interface {
  functions: {
    "addCollateralToken(address,uint256,uint24)": FunctionFragment;
    "addSupplyToken(address,uint256,uint24)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getAccountCollateralValueEth(address)": FunctionFragment;
    "getAccountLoansValueEth(address)": FunctionFragment;
    "getCollateralValueEth(address,uint256)": FunctionFragment;
    "getDepositByIndexForAccount(address,uint256)": FunctionFragment;
    "getHealthFactorBPS(address,uint256,address)": FunctionFragment;
    "getLoanIdByIndexForAccount(address,uint256)": FunctionFragment;
    "getLoanValueEth(address,uint256)": FunctionFragment;
    "getNumDepositsForAccount(address)": FunctionFragment;
    "getNumLoansForAccount(address)": FunctionFragment;
    "getOracleValueEth(address,uint256)": FunctionFragment;
    "liquidateAccount(address)": FunctionFragment;
    "openLoan((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)": FunctionFragment;
    "openLoans((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[],bytes[],uint256,uint256,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeCollateralToken(address)": FunctionFragment;
    "removeSupplyToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayLoan(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollateralToken"
      | "addSupplyToken"
      | "deposit"
      | "getAccountCollateralValueEth"
      | "getAccountLoansValueEth"
      | "getCollateralValueEth"
      | "getDepositByIndexForAccount"
      | "getHealthFactorBPS"
      | "getLoanIdByIndexForAccount"
      | "getLoanValueEth"
      | "getNumDepositsForAccount"
      | "getNumLoansForAccount"
      | "getOracleValueEth"
      | "liquidateAccount"
      | "openLoan"
      | "openLoans"
      | "owner"
      | "removeCollateralToken"
      | "removeSupplyToken"
      | "renounceOwnership"
      | "repayLoan"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollateralToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupplyToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCollateralValueEth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountLoansValueEth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralValueEth",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositByIndexForAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthFactorBPS",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanIdByIndexForAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanValueEth",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumDepositsForAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumLoansForAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleValueEth",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openLoan",
    values: [
      LoanOfferStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openLoans",
    values: [
      LoanOfferStruct[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCollateralToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupplyToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupplyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCollateralValueEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLoansValueEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralValueEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositByIndexForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthFactorBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanIdByIndexForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanValueEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumDepositsForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumLoansForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleValueEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openLoans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupplyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CollateralTokenChange(address,bool)": EventFragment;
    "NewLoan(address,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SupplyTokenChanged(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralTokenChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyTokenChanged"): EventFragment;
}

export interface CollateralTokenChangeEventObject {
  token: string;
  isAllowed: boolean;
}
export type CollateralTokenChangeEvent = TypedEvent<
  [string, boolean],
  CollateralTokenChangeEventObject
>;

export type CollateralTokenChangeEventFilter =
  TypedEventFilter<CollateralTokenChangeEvent>;

export interface NewLoanEventObject {
  lender: string;
  offerId: BigNumber;
  loanId: BigNumber;
  borrower: string;
}
export type NewLoanEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  NewLoanEventObject
>;

export type NewLoanEventFilter = TypedEventFilter<NewLoanEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SupplyTokenChangedEventObject {
  token: string;
  isAllowed: boolean;
}
export type SupplyTokenChangedEvent = TypedEvent<
  [string, boolean],
  SupplyTokenChangedEventObject
>;

export type SupplyTokenChangedEventFilter =
  TypedEventFilter<SupplyTokenChangedEvent>;

export interface TroveManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TroveManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateralToken(
      token: PromiseOrValue<string>,
      collateralFactorBPS: PromiseOrValue<BigNumberish>,
      oraclePoolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSupplyToken(
      token: PromiseOrValue<string>,
      borrowFactorBPS: PromiseOrValue<BigNumberish>,
      oraclePoolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountCollateralValueEth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getAccountLoansValueEth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getCollateralValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDepositByIndexForAccount(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getHealthFactorBPS(
      account: PromiseOrValue<string>,
      extraAmount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLoanIdByIndexForAccount(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLoanValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getNumDepositsForAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumLoansForAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOracleValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidateAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openLoan(
      loanOffer: LoanOfferStruct,
      signature: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openLoans(
      loanOffers: LoanOfferStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      allowPartialExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeCollateralToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSupplyToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayLoan(
      loanId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCollateralToken(
    token: PromiseOrValue<string>,
    collateralFactorBPS: PromiseOrValue<BigNumberish>,
    oraclePoolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSupplyToken(
    token: PromiseOrValue<string>,
    borrowFactorBPS: PromiseOrValue<BigNumberish>,
    oraclePoolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountCollateralValueEth(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getAccountLoansValueEth(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getCollateralValueEth(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getDepositByIndexForAccount(
    account: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getHealthFactorBPS(
    account: PromiseOrValue<string>,
    extraAmount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanIdByIndexForAccount(
    account: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanValueEth(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getNumDepositsForAccount(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumLoansForAccount(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracleValueEth(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidateAccount(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openLoan(
    loanOffer: LoanOfferStruct,
    signature: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openLoans(
    loanOffers: LoanOfferStruct[],
    signatures: PromiseOrValue<BytesLike>[],
    amount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    allowPartialExecution: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeCollateralToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSupplyToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayLoan(
    loanId: PromiseOrValue<BigNumberish>,
    newAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: PromiseOrValue<string>,
    newAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateralToken(
      token: PromiseOrValue<string>,
      collateralFactorBPS: PromiseOrValue<BigNumberish>,
      oraclePoolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupplyToken(
      token: PromiseOrValue<string>,
      borrowFactorBPS: PromiseOrValue<BigNumberish>,
      oraclePoolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountCollateralValueEth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getAccountLoansValueEth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getCollateralValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDepositByIndexForAccount(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getHealthFactorBPS(
      account: PromiseOrValue<string>,
      extraAmount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanIdByIndexForAccount(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getNumDepositsForAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumLoansForAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    openLoan(
      loanOffer: LoanOfferStruct,
      signature: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    openLoans(
      loanOffers: LoanOfferStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      allowPartialExecution: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeCollateralToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupplyToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayLoan(
      loanId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: PromiseOrValue<string>,
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralTokenChange(address,bool)"(
      token?: null,
      isAllowed?: null
    ): CollateralTokenChangeEventFilter;
    CollateralTokenChange(
      token?: null,
      isAllowed?: null
    ): CollateralTokenChangeEventFilter;

    "NewLoan(address,uint256,uint256,address)"(
      lender?: null,
      offerId?: null,
      loanId?: null,
      borrower?: null
    ): NewLoanEventFilter;
    NewLoan(
      lender?: null,
      offerId?: null,
      loanId?: null,
      borrower?: null
    ): NewLoanEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SupplyTokenChanged(address,bool)"(
      token?: null,
      isAllowed?: null
    ): SupplyTokenChangedEventFilter;
    SupplyTokenChanged(
      token?: null,
      isAllowed?: null
    ): SupplyTokenChangedEventFilter;
  };

  estimateGas: {
    addCollateralToken(
      token: PromiseOrValue<string>,
      collateralFactorBPS: PromiseOrValue<BigNumberish>,
      oraclePoolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSupplyToken(
      token: PromiseOrValue<string>,
      borrowFactorBPS: PromiseOrValue<BigNumberish>,
      oraclePoolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountCollateralValueEth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountLoansValueEth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositByIndexForAccount(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHealthFactorBPS(
      account: PromiseOrValue<string>,
      extraAmount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanIdByIndexForAccount(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumDepositsForAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumLoansForAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openLoan(
      loanOffer: LoanOfferStruct,
      signature: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openLoans(
      loanOffers: LoanOfferStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      allowPartialExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateralToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSupplyToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayLoan(
      loanId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateralToken(
      token: PromiseOrValue<string>,
      collateralFactorBPS: PromiseOrValue<BigNumberish>,
      oraclePoolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSupplyToken(
      token: PromiseOrValue<string>,
      borrowFactorBPS: PromiseOrValue<BigNumberish>,
      oraclePoolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountCollateralValueEth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountLoansValueEth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositByIndexForAccount(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHealthFactorBPS(
      account: PromiseOrValue<string>,
      extraAmount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanIdByIndexForAccount(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumDepositsForAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumLoansForAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleValueEth(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openLoan(
      loanOffer: LoanOfferStruct,
      signature: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openLoans(
      loanOffers: LoanOfferStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      allowPartialExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollateralToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSupplyToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayLoan(
      loanId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
